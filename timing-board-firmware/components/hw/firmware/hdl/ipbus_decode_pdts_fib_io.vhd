-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_pdts_fib_io is

  constant IPBUS_SEL_WIDTH: positive := 4;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_pdts_fib_io(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

 -- START automatically  generated VHDL the Tue May 12 10:53:09 2020 
  constant N_SLV_CSR: integer := 0;
  constant N_SLV_CONFIG: integer := 1;
  constant N_SLV_I2C_MAIN: integer := 2;
  constant N_SLV_I2C_SFP0: integer := 3;
  constant N_SLV_I2C_SFP1: integer := 4;
  constant N_SLV_I2C_SFP2: integer := 5;
  constant N_SLV_I2C_SFP3: integer := 6;
  constant N_SLV_I2C_SFP4: integer := 7;
  constant N_SLV_I2C_SFP5: integer := 8;
  constant N_SLV_I2C_SFP6: integer := 9;
  constant N_SLV_I2C_SFP7: integer := 10;
  constant N_SLV_FREQ: integer := 11;
  constant N_SLAVES: integer := 12;
-- END automatically generated VHDL


    
end ipbus_decode_pdts_fib_io;

package body ipbus_decode_pdts_fib_io is

  function ipbus_sel_pdts_fib_io(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Tue May 12 10:53:09 2020 
    if    std_match(addr, "-------------------------0000-0-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CSR, IPBUS_SEL_WIDTH)); -- csr / base 0x00000000 / mask 0x0000007a
    elsif std_match(addr, "-------------------------0000-1-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CONFIG, IPBUS_SEL_WIDTH)); -- config / base 0x00000002 / mask 0x0000007a
    elsif std_match(addr, "-------------------------0001---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_MAIN, IPBUS_SEL_WIDTH)); -- i2c_main / base 0x00000008 / mask 0x00000078
    elsif std_match(addr, "-------------------------0010---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP0, IPBUS_SEL_WIDTH)); -- i2c_sfp0 / base 0x00000010 / mask 0x00000078
    elsif std_match(addr, "-------------------------0011---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP1, IPBUS_SEL_WIDTH)); -- i2c_sfp1 / base 0x00000018 / mask 0x00000078
    elsif std_match(addr, "-------------------------0100---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP2, IPBUS_SEL_WIDTH)); -- i2c_sfp2 / base 0x00000020 / mask 0x00000078
    elsif std_match(addr, "-------------------------0101---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP3, IPBUS_SEL_WIDTH)); -- i2c_sfp3 / base 0x00000028 / mask 0x00000078
    elsif std_match(addr, "-------------------------0110---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP4, IPBUS_SEL_WIDTH)); -- i2c_sfp4 / base 0x00000030 / mask 0x00000078
    elsif std_match(addr, "-------------------------0111---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP5, IPBUS_SEL_WIDTH)); -- i2c_sfp5 / base 0x00000038 / mask 0x00000078
    elsif std_match(addr, "-------------------------1000---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP6, IPBUS_SEL_WIDTH)); -- i2c_sfp6 / base 0x00000040 / mask 0x00000078
    elsif std_match(addr, "-------------------------1001---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SFP7, IPBUS_SEL_WIDTH)); -- i2c_sfp7 / base 0x00000048 / mask 0x00000078
    elsif std_match(addr, "-------------------------1010-0-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_FREQ, IPBUS_SEL_WIDTH)); -- freq / base 0x00000050 / mask 0x0000007a
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;


  end function ipbus_sel_pdts_fib_io;

end ipbus_decode_pdts_fib_io;


